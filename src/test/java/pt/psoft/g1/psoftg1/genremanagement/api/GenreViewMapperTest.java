package pt.psoft.g1.psoftg1.genremanagement.api;

import static org.junit.Assert.assertNull;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mapstruct.factory.Mappers;

import pt.psoft.g1.psoftg1.bookmanagement.services.GenreBookCountDTO;
import pt.psoft.g1.psoftg1.genremanagement.model.Genre;
import pt.psoft.g1.psoftg1.genremanagement.services.GenreLendingsDTO;
import pt.psoft.g1.psoftg1.genremanagement.services.GenreLendingsPerMonthDTO;

class GenreViewMapperTest {

    private GenreViewMapper mapper;

    @BeforeEach
    void setUp() {
        mapper = Mappers.getMapper(GenreViewMapper.class);
        assertNotNull(mapper, "Mapper should be generated by MapStruct");
    }

    // opaque tests
    @Test
    void toGenreView() {
        Genre genre = new Genre("Drama");

        GenreView view = mapper.toGenreView(genre);

        assertNotNull(view);
        assertEquals("Drama", view.getGenre());
    }

    @Test
    void mapStringToGenreView() {
        GenreView view = mapper.mapStringToGenreView("Fantasy");

        assertNotNull(view);
        assertEquals("Fantasy", view.getGenre());
    }

    @Test
    void toGenreBookCountView() {
        Genre genre = new Genre("Sci-Fi");
        GenreBookCountDTO dto = new GenreBookCountDTO(genre.getGenre(), 100);

        GenreBookCountView view = mapper.toGenreBookCountView(dto);

        assertNotNull(view);
        assertNotNull(view.getGenreView());
        assertEquals(100, view.getBookCount());
    }

    @Test
    void toGenreBookCountView_mapsSingleDto() {
        GenreBookCountDTO dto = new GenreBookCountDTO("Drama", 15L);

        GenreBookCountView view = mapper.toGenreBookCountView(dto);

        assertNotNull(view);
        assertNotNull(view.getGenreView());
        assertEquals("Drama", view.getGenreView().getGenre()); // nom du genre
        assertEquals(15L, view.getBookCount());
    }

    @Test
    void toGenreBookCountView_mapsList() {
        var list = List.of(
                new GenreBookCountDTO("Fantasy", 10L),
                new GenreBookCountDTO("Romance", 5L));

        List<GenreBookCountView> result = mapper.toGenreBookCountView(list);

        assertEquals(2, result.size());
        assertEquals("Fantasy", result.get(0).getGenreView().getGenre());
        assertEquals(5L, result.get(1).getBookCount());
    }

    @Test
    void toGenreAvgLendingsView_mapsSingleDto() {
        GenreLendingsDTO dto = new GenreLendingsDTO("Horror", 4.5);

        GenreLendingsView view = mapper.toGenreAvgLendingsView(dto);

        assertNotNull(view);
        assertEquals("Horror", view.getGenre());
        assertEquals(4.5, view.getValue());
    }

    @Test
    void toGenreAvgLendingsView_mapsList() {
        var list = List.of(
                new GenreLendingsDTO("Drama", 3.0),
                new GenreLendingsDTO("Sci-Fi", 5.0));

        List<GenreLendingsView> views = mapper.toGenreAvgLendingsView(list);

        assertEquals(2, views.size());
        assertEquals("Sci-Fi", views.get(1).getGenre());
        assertEquals(5.0, views.get(1).getValue());
    }

    @Test
    void toGenreLendingsCountPerMonthView_mapsValues() {
        GenreLendingsDTO g1 = new GenreLendingsDTO("Fantasy", 10L);
        GenreLendingsDTO g2 = new GenreLendingsDTO("Drama", 20L);
        GenreLendingsPerMonthDTO dto = new GenreLendingsPerMonthDTO(2025, 9, List.of(g1, g2));

        GenreLendingsCountPerMonthView view = mapper.toGenreLendingsCountPerMonthView(dto);

        assertNotNull(view);
        assertEquals(2025, view.getYear());
        assertEquals(9, view.getMonth());
        assertNotNull(view.getLendingsCount());
        assertEquals(2, view.getLendingsCount().size());
        assertEquals("Fantasy", view.getLendingsCount().get(0).getGenre());
    }

    @Test
    void toGenreLendingsCountPerMonthView_mapsList() {
        var dto1 = new GenreLendingsPerMonthDTO(2025, 1,
                List.of(new GenreLendingsDTO("Drama", 10.0)));
        var dto2 = new GenreLendingsPerMonthDTO(2025, 2,
                List.of(new GenreLendingsDTO("Fantasy", 15.0)));

        List<GenreLendingsCountPerMonthView> views = mapper.toGenreLendingsCountPerMonthView(List.of(dto1, dto2));

        assertEquals(2, views.size());
        assertEquals(1, views.get(0).getMonth());
        assertEquals("Fantasy", views.get(1).getLendingsCount().get(0).getGenre());
    }

    @Test
    void toGenreLendingsAveragePerMonthView_mapsValues() {
        GenreLendingsDTO g1 = new GenreLendingsDTO("Sci-Fi", 2.5);
        GenreLendingsDTO g2 = new GenreLendingsDTO("Drama", 3.5);
        GenreLendingsPerMonthDTO dto = new GenreLendingsPerMonthDTO(2024, 5, List.of(g1, g2));

        GenreLendingsAvgPerMonthView view = mapper.toGenreLendingsAveragePerMonthView(dto);

        assertNotNull(view);
        assertEquals(2024, view.getYear());
        assertEquals(5, view.getMonth());
        assertNotNull(view.getDurationAverages());
        assertEquals(2, view.getDurationAverages().size());
        assertEquals(3.5, view.getDurationAverages().get(1).getValue());
    }

    @Test
    void toGenreLendingsAveragePerMonthView_mapsList() {
        var dto1 = new GenreLendingsPerMonthDTO(2025, 6,
                List.of(new GenreLendingsDTO("Fantasy", 2.0)));
        var dto2 = new GenreLendingsPerMonthDTO(2025, 7,
                List.of(new GenreLendingsDTO("Horror", 5.0)));

        List<GenreLendingsAvgPerMonthView> result = mapper.toGenreLendingsAveragePerMonthView(List.of(dto1, dto2));

        assertEquals(2, result.size());
        assertEquals(7, result.get(1).getMonth());
        assertEquals("Horror", result.get(1).getDurationAverages().get(0).getGenre());
    }

    // transparent tests

    @Test
    void toGenreViewWithNull() {
        Genre genre = null;

        GenreView genreView = mapper.toGenreView(genre);

        assertNull(genreView);
    }

    @Test
    void mapStringToGenreViewWithNull() {

        GenreView genreView = mapper.mapStringToGenreView(null);

        assertNull(genreView);
    }

    @Test
    void toGenreBookCountView_withNullDTO() {
        GenreBookCountDTO dto = null;

        GenreBookCountView view = mapper.toGenreBookCountView(dto);

        assertNull(view);
    }

    @Test
    void toGenreBookCountView_withNullList() {
        List<GenreBookCountDTO> list = null;

        List<GenreBookCountView> result = mapper.toGenreBookCountView(list);

        assertNull(result);
    }

    @Test
    void toGenreAvgLendingsView_withNullDTO() {
        GenreLendingsDTO dto = null;

        GenreLendingsView view = mapper.toGenreAvgLendingsView(dto);

        assertNull(view);
    }

    @Test
    void toGenreAvgLendingsView_withNullList() {
        List<GenreLendingsDTO> list = null;
        List<GenreLendingsView> views = mapper.toGenreAvgLendingsView(list);

        assertNull(views);
    }

    @Test
    void toGenreLendingsCountPerMonthView_withNullDto() {
        GenreLendingsPerMonthDTO dto = null;

        GenreLendingsCountPerMonthView view = mapper.toGenreLendingsCountPerMonthView(dto);

        assertNull(view);
    }

    @Test
    void toGenreLendingsCountPerMonthView_withNUllList() {
        List<GenreLendingsPerMonthDTO> list = null;
        List<GenreLendingsCountPerMonthView> views = mapper.toGenreLendingsCountPerMonthView(list);

        assertNull(views);
    }

    @Test
    void toGenreLendingsAveragePerMonthView_withNullDto() {
        GenreLendingsPerMonthDTO dto = null;

        GenreLendingsAvgPerMonthView view = mapper.toGenreLendingsAveragePerMonthView(dto);

        assertNull(view);
    }

    @Test
    void toGenreLendingsAveragePerMonthView_withNullList() {
        List<GenreLendingsPerMonthDTO> dto = null;

        List<GenreLendingsAvgPerMonthView> result = mapper.toGenreLendingsAveragePerMonthView(dto);

        assertNull(result);
    }

    @Test
    void toGenreLendingsCountPerMonthView_withDtoUsingGenreAndDoubleValue() {
        Genre genre = new Genre("Fantasy");
        GenreLendingsDTO g1 = new GenreLendingsDTO(genre, 10L);
        GenreLendingsDTO g2 = new GenreLendingsDTO("Drama", 20);
        Double dNull = null;

        GenreLendingsDTO g3 = new GenreLendingsDTO("drama", dNull);
        GenreLendingsPerMonthDTO dto = new GenreLendingsPerMonthDTO(2025, 9, List.of(g1, g2, g3));

        GenreLendingsCountPerMonthView view = mapper.toGenreLendingsCountPerMonthView(dto);

        assertNotNull(view);
        assertEquals(2025, view.getYear());
        assertEquals(9, view.getMonth());
        assertNotNull(view.getLendingsCount());
        assertEquals(3, view.getLendingsCount().size());
        assertEquals("Fantasy", view.getLendingsCount().get(0).getGenre());
    }
}