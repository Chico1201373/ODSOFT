pipeline {
    agent any

    environment {
        BRANCH_NAME_SANITIZED = "${env.GIT_BRANCH ?: env.BRANCH_NAME}".replaceAll('/', '-')
        DOCKER_IMAGE = "myapp:${BRANCH_NAME_SANITIZED}"
        SONAR_PROJECT_KEY = 'myapp-sonar'
    }
    tools {
        maven 'Maven'
        nodejs 'Nodejs'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    echo "Current branch: ${env.BRANCH_NAME}"
                    echo "Docker image name: ${DOCKER_IMAGE}"
                }
            }
        }

        stage('Build & Package') {
            steps {
                sh 'mvn clean package -DskipTests'
            }
            post {
                success {
                    archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQubeServer') {
                    sh 'mvn clean verify sonar:sonar -Dsonar.projectKey=myapp -Dsonar.login=$SONAR_TOKEN'
                }
            }
        }

        stage('Unit Testing') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                    recordCoverage(
                        tools: [[parser: 'JACOCO', pattern: 'target/site/jacoco/jacoco.xml']],
                        id: 'jacoco-unit',
                        name: 'JaCoCo Unit Coverage',
                        sourceCodeRetention: 'LAST_BUILD',
                        sourceDirectories: [[path: 'src/main/java'], [path: 'target/generated-sources/annotations']],
                        qualityGates: [
                            [metric: 'LINE',   baseline: 'PROJECT', threshold: 80.0, criticality: 'NOTE'],
                            [metric: 'BRANCH', baseline: 'PROJECT', threshold: 70.0, criticality: 'NOTE']
                        ]
                    )
                }
            }
        }

        stage('E2E API (Newman)') {
            environment {
                JACOCO_VERSION = '0.8.10'
                APP_PORT = '8081'
                
                AGENT_JAR  = "${HOME}/.m2/repository/org/jacoco/org.jacoco.agent/${JACOCO_VERSION}/org.jacoco.agent-${JACOCO_VERSION}-runtime.jar"
                DESTFILE   = "${WORKSPACE}/target/jacoco-e2e.exec"
            }
            steps {
                sh '''
                set -euo pipefail

                mvn -q -DskipTests dependency:get -Dartifact=org.jacoco:org.jacoco.agent:${JACOCO_VERSION}:jar:runtime

                mkdir -p target reports/junit reports/newman

                echo "Starting app with JaCoCo agent (FILE mode)..."
                echo "AGENT_JAR=${AGENT_JAR}"
                echo "DESTFILE =${DESTFILE}"

                nohup java -Djava.net.preferIPv4Stack=true \
                    -javaagent:"${AGENT_JAR}=destfile=${DESTFILE},append=true,output=file" \
                    -jar target/psoft-g1-0.0.1-SNAPSHOT.jar \
                    > app.log 2>&1 & echo $! > app.pid

                PID=$(cat app.pid)
                echo "Java command line:"; ps -p "$PID" -o pid=,args=

                set +e
                npx -y -p newman -p newman-reporter-htmlextra \
                    newman run "Docs/Psoft-G1.postman_collection.json" \
                    -e "Docs/Psoft-G1.postman_environment.json" \
                    --reporters cli,junit,htmlextra \
                    --reporter-junit-export reports/junit/newman-e2e.xml \
                    --reporter-htmlextra-export reports/newman/newman-e2e.html
                NEWMAN_RC=$?
                set -e
                echo $NEWMAN_RC > newman.rc
                '''
            }
            post {
                always {
                    sh '''
                        sleep 10
                        set +e
                        if [ -f app.pid ]; then
                        PID=$(cat app.pid)
                        echo "Stopping app PID=$PID ..."
                        kill "$PID" 2>/dev/null || true
                        # Wait for the process to stop fully to allow JaCoCo to flush the exec file
                        for i in {1..40}; do
                            kill -0 "$PID" 2>/dev/null || { echo "Stopped."; break; }
                            sleep 0.5
                        done
                        # Extra delay to ensure file is flushed
                        sleep 1
                        fi
                        rm -f app.pid

                        echo "Contents of target directory:"; ls -lah target || true
                        [ -s "${DESTFILE}" ] || echo "WARNING: ${DESTFILE} is missing or empty"

                        # Generate JaCoCo XML report only if exec file exists and is not empty
                        if [ -s "${DESTFILE}" ]; then
                        mvn -q -DskipTests org.jacoco:jacoco-maven-plugin:${JACOCO_VERSION}:report \
                            -Djacoco.dataFile="${DESTFILE}" \
                            -Djacoco.outputDirectory=target/site/jacoco-e2e || true
                        fi
                    '''

                    junit 'reports/junit/*.xml'
                    recordCoverage(
                        tools: [[parser: 'JACOCO', pattern: 'target/site/jacoco-e2e/jacoco.xml']],
                        id: 'jacoco-e2e',
                        name: 'JaCoCo E2E Coverage',
                        sourceCodeRetention: 'LAST_BUILD',
                        sourceDirectories: [[path: 'src/main/java'], [path: 'target/generated-sources/annotations']]
                    )
                    archiveArtifacts artifacts: 'app.log, reports/newman/*.html, reports/junit/*.xml, newman.rc, target/*.exec, target/site/jacoco-e2e/jacoco.xml', allowEmptyArchive: true
                }
            }
        }

        stage('Mutation Testing') {
            steps {
                sh 'mvn org.pitest:pitest-maven:mutationCoverage'
            }
            post {
                always {
                    recordCoverage(
                        tools: [[parser: 'PIT', pattern: 'target/pit-reports/latest/mutations.xml']],
                        id: 'pit',
                        name: 'PIT Mutation Coverage',
                        sourceCodeRetention: 'LAST_BUILD',
                        sourceDirectories: [[path: 'src/main/java'], [path: 'target/generated-sources/annotations']],
                        qualityGates: [[metric: 'MUTATION', baseline: 'PROJECT', threshold: 70.0, criticality: 'NOTE']]
                    )
                }
            }
        }

        stage('Integration Tests') {
            steps {
                sh 'mvn jacoco:prepare-agent-integration failsafe:integration-test failsafe:verify'
            }
            post {
                always {
                    junit '**/target/failsafe-reports/*.xml'
                    recordCoverage(
                        tools: [[parser: 'JACOCO', pattern: 'target/site/jacoco-it/jacoco.xml']],
                        id: 'jacoco-it',
                        name: 'JaCoCo IT Coverage',
                        sourceCodeRetention: 'LAST_BUILD',
                        sourceDirectories: [[path: 'src/main/java'], [path: 'target/generated-sources/annotations']],
                        qualityGates: [
                            [metric: 'LINE',   baseline: 'PROJECT', threshold: 80.0, criticality: 'NOTE'],
                            [metric: 'BRANCH', baseline: 'PROJECT', threshold: 70.0, criticality: 'NOTE']
                        ]
                    )
                }
            }
        }

        //  Build & Push Docker image only for staging or main
        stage('Build Docker Image') {
            when {
                expression { fileExists('Dockerfile') }

                anyOf {
                    branch 'staging'
                    branch 'main'
                }
            }
            steps {
                echo " Building Docker image for ${BRANCH_NAME_SANITIZED}"
                withCredentials([usernamePassword(credentialsId: 'docker-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker build -t "$DOCKER_USER/myapp:${BRANCH_NAME_SANITIZED}" .
                        docker push "$DOCKER_USER/myapp:${BRANCH_NAME_SANITIZED}"
                    '''
                }
            }
        }

        //  Only deploy when on main branch (production)
        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                echo 'Deploying to PRODUCTION (Docker)...'
                withCredentials([usernamePassword(credentialsId: 'docker-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker pull "$DOCKER_USER/myapp:main"
                        docker stop myapp || true
                        docker rm myapp || true
                        docker run -d --name myapp -p 8081:8081 "$DOCKER_USER/myapp:main"
                        '''
                }
            }
        }

        // Local run for develop
        stage('Deploy to Development') {
            when {
                branch 'develop'
            }
            steps {
                echo '🚀 Running local JAR for DEVELOPMENT...'
                sh '''
                    pkill -f "psoft-g1-0.0.1-SNAPSHOT.jar" || true
                    nohup java -jar target/psoft-g1-0.0.1-SNAPSHOT.jar > app.log 2>&1 &
                '''
            }
        }
    }

    post {
        failure {
            echo '❌ Pipeline completed unsuccessfully!'
        }
        success {
            echo '✅ Pipeline completed successfully!'
        }
    }
}
